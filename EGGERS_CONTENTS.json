{"home":{"content":"# Servers 101\n\nWelcome to **Lecture 24**! Here is a brief class breakdown.\n\n## Learning Objectives\n\n1. What is a server? How does it work?\n2. How do we build our own server with some simple **GET** and **POST** request functionality?\n\n## To Do Today\n\n* ### [Warmup](#warmup)\n* ### [Server Basics](#server-basics)\n* ### [Simple GET Requests](#simple-get-requests)\n* ### [Routing](#routing)\n* ### [Simple POST Requests](#simple-post-requests)\n* ### [Serving a full webpage](#serving-a-full-webpage)\n* ### [Serving JSON content](#serving-json-content)\n\n","idx":0},"title":{"content":"Servers 101","idx":1},"desc":{"content":"A quick introduction to serving and routing in NodeJS","idx":2},"warmup":{"content":"# Warmup\n\nLet's begin with a few short exercises.\n\n## Exercise 1\n\nCreate a new folder.\n\n```bash\nmkdir node-server && cd node-server\n```\n\nInitialize your project inside this folder.\n\n```bash\nnpm init\n```\n**Remember** to follow the steps **NPM init** provides for you! **WINDOWS** users, after the last prompt, if process does not quit, simply **Ctrl+D** to exit.\n\nCreate an **index.js** file for Node\n\n```bash\ntouch index.js\n```\n\nCreate a folder called **public**.\n\n```bash\nmkdir public\n```\n\nInside your **public** folder, create the usual files and folders you would for a regular website.\n\n```bash\ncd public\nmkdir styles js\ntouch index.html js/app.js styles/main.css\n```\n\nOpen up your entire **node-server** project on sublime, write some sample code in your **index.js** file, and test run to ensure it is working fine.\n\n## Exercise 2\n\nThere are a few modules that we will be working with tonight.\n\nInstall each module as follows:\n\n```bash\nnpm install --save-dev nodemon\nnpm install --save cookies\n```\n\n**Question**: what is the point of **--save**? How about **--save-dev**?\n\n","idx":3},"server-basics":{"content":"# Server Basics\n\nFirst, let's define some important terminology.\n\n## Define: Server\n\nA **server**, specifically a **web server**, is a piece of software that continuously listens for **HTTP requests** on a specified **port**. It handles these **HTTP requests** in various ways, interfacing with the internal filesystem **or** database and issues a **response**. The **response** can be anything, though typically it is usually **HTML** or **JSON** strings. **Clients**, typically web browsers, handle this **response** by parsing it and rendering it (either as a webpage or a formatted JSON string).\n\n## Define: Port\n\nA port is device that transfers information between an internet connection and a computer. You can think of it as the doorman in the lobby of an office building. Typically, a computer will have multiple ports, so when establishing a new server we have to specify **which** port (numeric) we should listen to (for HTTP requests).\n\n## Define: HTTP Request\n\nA HTTP request defines a client asking our server for some piece of information. Typically, the request contains information that further describes the request. This information comes in a few flavors:\n\n### Request Types\nCan be either **GET**, **POST**, **PUT**, or **DELETE**. There are a few others that are supported but not super widely used, so we'll stick to these for now.\n\n**GET**: This is the most common, every time we load a page on a browser, we are issuing a **GET** request to a server. Think of **GETs** as **read** requests.\n\n**POST**: This - most often - is used to create a new record of something on the server. When we log in to a web server (ie: facebook) **or** if we create a new account or new tweet, IG post, etc - we are usually issuing a **POST** request. \n\n**PUT**: The **PUT** is typically used to update an existing record. When we edit a comment on IG/facebook or if we are updating our user profile somewhere, we are usually issuing a **PUT** request.\n\n**DELETE**: As the name suggests, we typically issue **DELETE** requests when we want to remove a specific record.\n\nThese four request types can be combined to create what we call a **CRUD** app. More on that later tho.\n\n### Request Body\n\nWhen issuing a **PUT**, **POST**, or **DELETE** request, we can optionally pass in a data payload from the client. This data payload is usually either JSON (ie: javascript object that has been converted to a string) **or** it's encoded, ampersand-ed form data.\n\n### Request Params\n\nRemember the `?foo=bar&baz=1&etc=2` strings we observed while working with AJAX on the frontend? These **query params** are passed in to the server by the client - where they can be parsed and used as arguments of a serverside function (or for conditional logic).\n\n### Request Headers\n\nAdditional bits of information that is helpful to the server to parse, understand, and properly respond to a client request. \n\nHere's an example of a header: `Content-Type: application/json`. \n\n^^^ This tells the server that the **request body** of this particular request is formatted as JSON and not form data.\n\n## Define: HTTP Response\n\nA HTTP response is what the server sends back to the client along with (hopefully) the data requested. Usually, this works in a very similar way that the **http request** does. \n\n## Exercise\n\nLet's create a simple NodeJS server of our own.\n\nConsider the following code:\n\n```js\nconst http = require('http');\nconst port = 8008;\n\nconst onRequest = (request, response) => {...}\nconst server = http.createServer(router);\n\nserver.listen(port, (err) => {  \n  if (err) {\n    return console.log(err)\n  }\n\n  console.log(`server is listening on http://localhost:${port}`)\n})\n```\n\nMove this over to your **index.js**. Parse through it and try to understand what it does. \n\n### Task 1\nUsing the **[documentation for http](https://nodejs.org/api/http.html#http_http)**, have your program `console.log` the **url** of a HTTP request that is sent to your server.\n\n### Task 2\n\nUsing the **[documentation for http](https://nodejs.org/api/http.html#http_http)**, have your program issue a server **response** to the client with the text **Hello, Wrold from NodeJS Server**.\n\n### Stretch Goals\n\n1. Send out **two** different flavors of response, based on **request** url.\n2. Send out the **request.url** and **request.method** values to the client as well.\n\n\n\n","idx":4},"simple-get-requests":{"content":"# Simple GET Requests\n\nLet's improve our HTTP Server\n\n## Exercise\n\nWe will update our server with a few powerups...\n\nLet's first define some routes. **Routes** are url fragments that define specific, known requests that the client could make. In the event of those requests, let's response with some pertinent information.\n\n### Task 1\n\nUsing the `request.url` property in `onRequest`, determine if a request URL is either:\n\n1. `/index.html`\n2. `/index.json`\n\nIf the request is for `/index.html`, then respond with the following **html** code:\n\n```html\n'<h1>Hello, Wrold from NodeJS!</h1>`\n```\n\n**NOTE**: on the client, this **must** render as html, meaning your content should be bolded from the default **h1** styles.\n\nIf the request is for `/index.json`, then respond with the following **json** code:\n\n```js\n{\"content\": 'Hello, Wrold from NodeJS'}\n```\n\nNOTE: on the client, this **must** render as a JSON string.\n\n","idx":5},"routing":{"content":"","idx":6},"simple-post-requests":{"content":"","idx":7},"serving-a-full-webpage":{"content":"","idx":8},"serving-json-content":{"content":"","idx":9},"__list__":["home","title","desc","warmup","server-basics","simple-get-requests","routing","simple-post-requests","serving-a-full-webpage","serving-json-content"]}